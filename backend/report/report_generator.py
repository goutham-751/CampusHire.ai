import json
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional
import sys

# Add project root to path
project_root = Path(__file__).parent.parent.parent
sys.path.append(str(project_root))

class InterviewReportGenerator:
    """
    Enhanced report generator for CampusHire.ai interview results
    Handles multiple report formats and advanced analytics
    """
    
    def __init__(self):
        self.output_dir = Path(project_root) / "data" / "outputs"
        self.output_dir.mkdir(parents=True, exist_ok=True)
        
    def generate_executive_summary(self, report_data: Dict) -> str:
        """Generate executive summary for hiring managers"""
        
        performance = report_data.get("performance_metrics", {})
        assessment = report_data.get("final_assessment", {})
        metadata = report_data.get("session_metadata", {})
        
        summary = f"""
# 📋 EXECUTIVE SUMMARY - {metadata.get('candidate_name', 'Candidate')}

## 🎯 Quick Decision
**Recommendation:** {assessment.get('recommendation', 'Under Review')}
**Confidence:** {assessment.get('confidence_level', 'Medium')}
**Hire Probability:** {assessment.get('hire_probability', 0)}%

## 📊 Key Metrics
- **Overall Score:** {performance.get('overall_score', 0)}/10
- **Technical Competency:** {performance.get('technical_competency', 0)}/5
- **Communication Skills:** {performance.get('communication_skills', 0)}/5
- **Interview Completion:** {metadata.get('completion_rate', 0)}%

## 💡 Key Insights
{self._format_key_insights(report_data)}

---
*Generated by CampusHire.ai on {datetime.now().strftime('%Y-%m-%d at %H:%M')}*
        """
        
        return summary.strip()
    
    def generate_detailed_report(self, report_data: Dict) -> str:
        """Generate comprehensive detailed report"""
        
        sections = [
            self._generate_header(report_data),
            self._generate_candidate_profile(report_data),
            self._generate_performance_analysis(report_data),
            self._generate_question_breakdown(report_data),
            self._generate_strengths_weaknesses(report_data),
            self._generate_recommendations(report_data),
            self._generate_footer()
        ]
        
        return "\n\n".join(sections)
    
    def generate_hr_dashboard_data(self, report_data: Dict) -> Dict:
        """Generate data optimized for HR dashboard visualization"""
        
        performance = report_data.get("performance_metrics", {})
        
        return {
            "candidate_id": report_data.get("session_metadata", {}).get("session_id"),
            "candidate_name": report_data.get("session_metadata", {}).get("candidate_name"),
            "interview_date": report_data.get("session_metadata", {}).get("interview_date"),
            "scores": {
                "overall": performance.get("overall_score", 0),
                "technical": performance.get("technical_competency", 0),
                "communication": performance.get("communication_skills", 0),
                "role_fit": performance.get("role_relevance", 0)
            },
            "recommendation": report_data.get("final_assessment", {}).get("recommendation"),
            "key_strengths": report_data.get("qualitative_assessment", {}).get("top_strengths", [])[:3],
            "improvement_areas": report_data.get("qualitative_assessment", {}).get("improvement_areas", [])[:2],
            "resume_match": report_data.get("resume_analysis", {}).get("resume_match_score", 0),
            "interview_duration": report_data.get("session_metadata", {}).get("duration_minutes", 0)
        }
    
    def save_report(self, report_data: Dict, format_type: str = "all") -> Dict[str, str]:
        """Save reports in multiple formats"""
        
        session_id = report_data.get("session_metadata", {}).get("session_id", "unknown")
        candidate_name = report_data.get("session_metadata", {}).get("candidate_name", "candidate")
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        saved_files = {}
        
        if format_type in ["all", "executive"]:
            # Executive Summary (Markdown)
            executive_summary = self.generate_executive_summary(report_data)
            exec_path = self.output_dir / f"executive_summary_{session_id}_{timestamp}.md"
            with open(exec_path, 'w', encoding='utf-8') as f:
                f.write(executive_summary)
            saved_files["executive_summary"] = str(exec_path)
        
        if format_type in ["all", "detailed"]:
            # Detailed Report (Markdown)
            detailed_report = self.generate_detailed_report(report_data)
            detail_path = self.output_dir / f"detailed_report_{session_id}_{timestamp}.md"
            with open(detail_path, 'w', encoding='utf-8') as f:
                f.write(detailed_report)
            saved_files["detailed_report"] = str(detail_path)
        
        if format_type in ["all", "json"]:
            # Raw Data (JSON)
            json_path = self.output_dir / f"interview_data_{session_id}_{timestamp}.json"
            with open(json_path, 'w', encoding='utf-8') as f:
                json.dump(report_data, f, indent=2, default=str, ensure_ascii=False)
            saved_files["raw_data"] = str(json_path)
        
        if format_type in ["all", "dashboard"]:
            # HR Dashboard Data (JSON)
            dashboard_data = self.generate_hr_dashboard_data(report_data)
            dashboard_path = self.output_dir / f"dashboard_data_{session_id}_{timestamp}.json"
            with open(dashboard_path, 'w', encoding='utf-8') as f:
                json.dump(dashboard_data, f, indent=2, ensure_ascii=False)
            saved_files["dashboard_data"] = str(dashboard_path)
        
        return saved_files
    
    def _generate_header(self, report_data: Dict) -> str:
        """Generate report header"""
        metadata = report_data.get("session_metadata", {})
        
        return f"""# 🎯 CampusHire.ai Interview Assessment Report

**Candidate:** {metadata.get('candidate_name', 'Unknown')}
**Session ID:** {metadata.get('session_id', 'N/A')}
**Interview Date:** {metadata.get('interview_date', 'N/A')}
**Duration:** {metadata.get('duration_minutes', 0)} minutes
**Questions Completed:** {metadata.get('questions_answered', 0)}/{metadata.get('total_questions_planned', 0)}

---"""
    
    def _generate_candidate_profile(self, report_data: Dict) -> str:
        """Generate candidate profile section"""
        resume_analysis = report_data.get("resume_analysis", {})
        
        profile_section = "## 👤 Candidate Profile\n\n"
        
        if resume_analysis.get("resume_uploaded"):
            profile_section += f"**Resume Match Score:** {resume_analysis.get('resume_match_score', 0):.1f}%\n\n"
            
            skills = resume_analysis.get("extracted_skills", [])
            if skills:
                profile_section += f"**Key Skills:** {', '.join(skills[:8])}\n\n"
            
            experience = resume_analysis.get("work_experience", [])
            if experience:
                profile_section += f"**Work Experience:** {', '.join(experience[:5])}\n\n"
        else:
            profile_section += "*No resume uploaded for this interview.*\n\n"
        
        return profile_section
    
    def _generate_performance_analysis(self, report_data: Dict) -> str:
        """Generate performance analysis section"""
        performance = report_data.get("performance_metrics", {})
        
        return f"""## 📊 Performance Analysis

### Overall Metrics
- **Overall Score:** {performance.get('overall_score', 0):.1f}/10
- **Technical Competency:** {performance.get('technical_competency', 0):.1f}/5
- **Communication Skills:** {performance.get('communication_skills', 0):.1f}/5
- **Role Relevance:** {performance.get('role_relevance', 0):.1f}/5
- **Use of Examples:** {performance.get('use_of_examples', 0):.1f}/5

### Response Distribution
- **Excellent (8-10):** {performance.get('score_distribution', {}).get('excellent_responses', 0)} responses
- **Good (6-7):** {performance.get('score_distribution', {}).get('good_responses', 0)} responses
- **Average (4-5):** {performance.get('score_distribution', {}).get('average_responses', 0)} responses
- **Weak (<4):** {performance.get('score_distribution', {}).get('weak_responses', 0)} responses"""
    
    def _generate_question_breakdown(self, report_data: Dict) -> str:
        """Generate question-by-question breakdown"""
        responses = report_data.get("detailed_responses", [])
        
        breakdown = "## 📝 Question Breakdown\n\n"
        
        for i, response in enumerate(responses, 1):
            evaluation = response.get("evaluation", {})
            breakdown += f"""### Question {i}: {response.get('category', 'General').title()}
**Question:** {response.get('question', 'N/A')[:100]}...

**Score:** {evaluation.get('overall_score', 0)}/10
**Strengths:** {', '.join(evaluation.get('strengths', [])[:2])}
**Areas to Improve:** {', '.join(evaluation.get('improvements', [])[:2])}

---
"""
        
        return breakdown
    
    def _generate_strengths_weaknesses(self, report_data: Dict) -> str:
        """Generate strengths and weaknesses analysis"""
        assessment = report_data.get("qualitative_assessment", {})
        
        return f"""## 💪 Strengths & Development Areas

### Key Strengths
{self._format_list(assessment.get('top_strengths', []))}

### Areas for Development  
{self._format_list(assessment.get('improvement_areas', []))}

### Standout Responses
{self._format_standout_responses(assessment.get('standout_responses', []))}"""
    
    def _generate_recommendations(self, report_data: Dict) -> str:
        """Generate recommendations section"""
        assessment = report_data.get("final_assessment", {})
        next_steps = report_data.get("next_steps", {})
        
        return f"""## 🎯 Final Assessment & Recommendations

### Decision Recommendation
**{assessment.get('recommendation', 'Under Review')}** (Confidence: {assessment.get('confidence_level', 'Medium')})

**Key Decision Factors:**
{self._format_list(assessment.get('key_decision_factors', []))}

### Next Steps
{self._format_list(next_steps.get('recommended_actions', []))}

### Follow-up Questions (if proceeding)
{self._format_list(next_steps.get('follow_up_questions', []))}"""
    
    def _generate_footer(self) -> str:
        """Generate report footer"""
        return f"""---
## 📋 Report Information

**Generated by:** CampusHire.ai Voice Interview System
**Report Date:** {datetime.now().strftime('%Y-%m-%d at %H:%M:%S')}
**Privacy Note:** This report contains structured interview data only. Original resume files are securely deleted after processing.

*This assessment is generated by AI and should be used as a tool to support, not replace, human judgment in hiring decisions.*"""
    
    def _format_list(self, items: List[str]) -> str:
        """Format a list of items as markdown bullets"""
        if not items:
            return "- *None identified*"
        return "\n".join(f"- {item}" for item in items)
    
    def _format_standout_responses(self, responses: List[Dict]) -> str:
        """Format standout responses"""
        if not responses:
            return "- *No standout responses identified*"
        
        formatted = []
        for response in responses:
            formatted.append(f"- **{response.get('category', 'General').title()}:** {response.get('question', 'Question')} (Score: {response.get('score', 0)}/10)")
        
        return "\n".join(formatted)
    
    def _format_key_insights(self, report_data: Dict) -> str:
        """Format key insights for executive summary"""
        assessment = report_data.get("qualitative_assessment", {})
        performance = report_data.get("performance_metrics", {})
        
        insights = []
        
        # Top strength
        strengths = assessment.get("top_strengths", [])
        if strengths:
            insights.append(f"**Primary Strength:** {strengths[0]}")
        
        # Performance highlight
        overall_score = performance.get("overall_score", 0)
        if overall_score >= 8:
            insights.append("**Performance:** Consistently strong across all areas")
        elif overall_score >= 6:
            insights.append("**Performance:** Solid performance with some standout areas")
        else:
            insights.append("**Performance:** Mixed results, needs development")
        
        # Technical assessment
        tech_score = performance.get("technical_competency", 0)
        if tech_score >= 4:
            insights.append("**Technical:** Strong technical foundation")
        elif tech_score >= 3:
            insights.append("**Technical:** Adequate technical knowledge")
        else:
            insights.append("**Technical:** Requires technical development")
        
        return "\n".join(f"- {insight}" for insight in insights)

# Convenience function for easy import
def generate_interview_report(report_data: Dict, format_type: str = "all") -> Dict[str, str]:
    """
    Convenience function to generate and save interview reports
    
    Args:
        report_data: Complete interview data from voice_interview_api
        format_type: "executive", "detailed", "json", "dashboard", or "all"
    
    Returns:
        Dictionary of saved file paths
    """
    generator = InterviewReportGenerator()
    return generator.save_report(report_data, format_type)
